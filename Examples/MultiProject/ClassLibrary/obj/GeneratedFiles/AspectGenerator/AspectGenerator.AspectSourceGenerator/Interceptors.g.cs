// <auto-generated/>
#pragma warning disable
#nullable enable

using System;

using SR  = System.Reflection;
using SLE = System.Linq.Expressions;
using SCG = System.Collections.Generic;

namespace MultiProjectAspectGenerator
{
	using AspectGenerator = AspectGenerator;

	static partial class Interceptors
	{
		static SR.MethodInfo GetMethodInfo(SLE.Expression expr)
		{
			return expr switch
			{
				SLE.MethodCallExpression mc => mc.Method,
				_                           => throw new InvalidOperationException()
			};
		}

		static SR.MethodInfo MethodOf<T>(SLE.Expression<Func<T>> func) => GetMethodInfo(func.Body);
		static SR.MethodInfo MethodOf   (SLE.Expression<Action>  func) => GetMethodInfo(func.Body);

		static SR. MemberInfo                 TestMethod_Interceptor_MemberInfo        = MethodOf(() => ClassLibrary.TestClass.TestMethod(default(string)));
		static SCG.Dictionary<string,object?> TestMethod_Interceptor_AspectArguments_0 = new()
		{
		};
		//
		/// <summary>
		/// Intercepts ClassLibrary.TestClass.TestMethod(string).
		/// </summary>
		//
		// Intercepts TestMethod(str + " MainMethod").
		[System.Runtime.CompilerServices.InterceptsLocation(@"P:\AspectGenerator\Examples\MultiProject\ClassLibrary\TestClass.cs", line: 17, character: 11)]
		//
		[System.Runtime.CompilerServices.CompilerGenerated]
		//[System.Diagnostics.DebuggerStepThrough]
		public static string TestMethod_Interceptor(string str)
		{
			// Aspects.CrossProjectAttribute
			//
			var __info__0 = new AspectGenerator.InterceptInfo<string>
			{
				MemberInfo      = TestMethod_Interceptor_MemberInfo,
				AspectType      = typeof(Aspects.CrossProjectAttribute),
				AspectArguments = TestMethod_Interceptor_AspectArguments_0,
			};

			__info__0.ReturnValue = ClassLibrary.TestClass.TestMethod(str);

			__info__0.InterceptType = AspectGenerator.InterceptType.OnAfterCall;
			Aspects.CrossProjectAttribute.OnAfterCall(__info__0);

			return __info__0.ReturnValue;
		}
	}
}
