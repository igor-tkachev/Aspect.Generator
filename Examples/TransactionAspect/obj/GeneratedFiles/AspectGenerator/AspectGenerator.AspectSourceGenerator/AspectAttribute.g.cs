// <auto-generated/>
#pragma warning disable
#nullable enable

using System;

namespace AspectGenerator
{
	[Aspect]
	[AttributeUsage(AttributeTargets.Class, Inherited = false, AllowMultiple = false)]
	sealed class AspectAttribute : Attribute
	{
		public string? OnInit             { get; set; }
		public string? OnUsing            { get; set; }
		public string? OnUsingAsync       { get; set; }
		public string? OnBeforeCall       { get; set; }
		public string? OnBeforeCallAsync  { get; set; }
		public string? OnAfterCall        { get; set; }
		public string? OnAfterCallAsync   { get; set; }
		public string? OnCatch            { get; set; }
		public string? OnCatchAsync       { get; set; }
		public string? OnFinally          { get; set; }
		public string? OnFinallyAsync     { get; set; }
		public bool    PassArguments      { get; set; }
	}

	enum InterceptType
	{
		OnInit,
		OnBeforeCall,
		OnAfterCall,
		OnCatch,
		OnFinally
	}

	enum InterceptResult
	{
		Continue,
		Return,
		ReThrow     = Continue,
		IgnoreThrow = Return
	}

	struct Void
	{
	}

	abstract class InterceptInfo
	{
		public object?         Tag;
		public InterceptType   InterceptType;
		public InterceptResult InterceptResult;
		public Exception?      Exception;

		public InterceptInfo?                                        PreviousInfo;
		public System.Reflection.MemberInfo                          MemberInfo;
		public object?[]?                                            MethodArguments;
		public Type                                                  AspectType;
		public System.Collections.Generic.Dictionary<string,object?> AspectArguments;
	}

	class InterceptInfo<T> : InterceptInfo
	{
		public T ReturnValue;
	}
}

namespace System.Runtime.CompilerServices
{
	[AttributeUsage(AttributeTargets.Method, AllowMultiple = true)]
	sealed class InterceptsLocationAttribute(string filePath, int line, int character) : Attribute
	{
	}
}
